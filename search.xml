<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分层图最短路</title>
      <link href="/ZcDawn/7d3306c0.html"/>
      <url>/ZcDawn/7d3306c0.html</url>
      
        <content type="html"><![CDATA[<h1 id="分层图最短路">分层图最短路</h1><h2 id="分层图的一般模型">分层图的一般模型</h2><ul><li>分层图可以理解为多个平行的图</li><li>在一个正常的图上可以进行k次决策，对于每次决策，不影响图的结构，只影响目前的状态或代价。一般将决策前的状态和决策后的状态之间连接一条权值为决策代价的边，表示付出该代价后就可以转换状态。</li></ul><h2 id="分层图建图方法">分层图建图方法</h2><p>根据数据范围选择建图方法 1. 建图时直接建成<spanclass="math inline"><em>k</em> + 1</span>层 2. 多开一维记录机会信息</p><h3 id="建k1层图">建<spanclass="math inline"><em>k</em> + 1</span>层图</h3><ul><li>建<spanclass="math inline"><em>k</em> + 1</span>层图时，对于存在边的两个点，需要多建一条到下一层边权为0的单向边，如果走了这条边就表示用了一次机会。</li><li>有<span class="math inline"><em>N</em></span>个点时，<spanclass="math inline">(1, <em>n</em>)</span>表示第一层，<spanclass="math inline">(1 + <em>n</em>, <em>n</em> + <em>n</em>)</span>代表第二层，<spanclass="math inline">(1 + <em>k</em> * <em>n</em>, <em>n</em> + <em>k</em> * <em>n</em>)</span>代表第<spanclass="math inline"><em>k</em></span>层。</li><li><span class="math inline"><em>k</em></span>层图到<spanclass="math inline"><em>n</em></span>点的最短路答案为<spanclass="math inline"><em>m</em><em>i</em><em>n</em>(<em>n</em>, 2 * <em>n</em>, 3 * <em>n</em>, ..., <em>k</em> * <em>n</em>)</span>。</li></ul><h4 id="例-abc395e">例 abc395E</h4><h5 id="题意">题意</h5><p>有向图边权为1，求<spanclass="math inline">1 ∼ <em>n</em></span>的最短路，但可以花费<spanclass="math inline"><em>x</em></span>代价反转所有边，可以多次反转。</p><h5 id="思路">思路</h5><p>建两层图，一层原图，一层反图，对于<spanclass="math inline"><em>a</em></span>到<spanclass="math inline"><em>b</em></span>的一条有向边，再建一条反转后的<spanclass="math inline"><em>b</em></span>到<spanclass="math inline"><em>a</em></span>的边，原图和反图上的每个点建代价为<spanclass="math inline"><em>x</em></span>的双向边。那么答案为<spanclass="math inline"><em>m</em><em>i</em><em>n</em>(<em>d</em><em>i</em><em>s</em><em>t</em>[<em>n</em>], <em>d</em><em>i</em><em>s</em><em>t</em>[2 * <em>n</em>])</span>。</p><h5 id="代码">代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">ll v,w;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;edge&gt;e[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,x;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">e[a].<span class="built_in">pb</span>(&#123;b,<span class="number">1</span>&#125;);</span><br><span class="line">e[b+n].<span class="built_in">pb</span>(&#123;a+n,<span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">e[i].<span class="built_in">pb</span>(&#123;i+n,x&#125;);</span><br><span class="line">e[i+n].<span class="built_in">pb</span>(&#123;i,x&#125;);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;ll&gt;<span class="built_in">dist</span>(<span class="number">2</span>*n<span class="number">+10</span>,<span class="number">1e18</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> dij=[&amp;](<span class="type">int</span> x)</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">vis</span>(<span class="number">2</span>*n<span class="number">+1</span>);</span><br><span class="line"></span><br><span class="line">priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;<span class="number">0</span>,x&#125;);</span><br><span class="line">dist[x]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> [cost,cur]=q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(vis[cur]) <span class="keyword">continue</span>;</span><br><span class="line">vis[cur]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> [v,w]:e[cur])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dist[v]&gt;cost+w)</span><br><span class="line">&#123;</span><br><span class="line">dist[v]=cost+w;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;dist[v],v&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="built_in">dij</span>(<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;<span class="built_in">min</span>(dist[n],dist[<span class="number">2</span>*n])&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多开一维记录机会信息">多开一维记录机会信息</h3><ul><li>把dist和vis数组以及优先队列多开一维记录<spanclass="math inline"><em>k</em></span>次机会的信息。</li><li>最短路算法更新dist数组时，对于使用和不使用机会分别更新</li></ul><h3 id="例题-洛谷p4568-飞行路线">例题 洛谷P4568 飞行路线</h3><h4 id="题意-1">题意</h4><p>Alice 和 Bob现在要乘飞机旅行，他们选择了一家相对便宜的航空公司。该航空公司一共在<span class="math inline"><em>n</em></span>个城市设有业务，设这些城市分别标记为 <span class="math inline">0</span>到 <span class="math inline"><em>n</em> − 1</span>，一共有 <spanclass="math inline"><em>m</em></span>种航线，每种航线连接两个城市，并且航线有一定的价格。</p><p>Alice 和 Bob现在要从一个城市沿着航线到达另一个城市，途中可以进行转机。航空公司对他们这次旅行也推出优惠，他们可以免费在最多<span class="math inline"><em>k</em></span> 种航线上搭乘飞机。那么 Alice和 Bob 这次出行最少花费多少？</p><h4 id="思路-1">思路</h4><p>多开一维记录免费次数，对于每个点，分别更新使用和不使用免费机会的代价</p><h4 id="代码-1">代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e4</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> v,w;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;edge&gt;e[N];</span><br><span class="line"><span class="type">int</span> dist[N][<span class="number">11</span>];</span><br><span class="line"><span class="type">int</span> vis[N][<span class="number">11</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m,k,s,t;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">e[a].<span class="built_in">pb</span>(&#123;b,c&#125;);</span><br><span class="line">e[b].<span class="built_in">pb</span>(&#123;a,c&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dist,inf,<span class="keyword">sizeof</span> dist);</span><br><span class="line">priority_queue&lt;PIII,vector&lt;PIII&gt;,greater&lt;PIII&gt;&gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;<span class="number">0</span>,s,k&#125;);</span><br><span class="line">dist[s][k]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> [d,cur,times]=q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//if(cur==t) &#123;cout&lt;&lt;d&lt;&lt;endl;return;&#125;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;d&lt;&lt;&quot; &quot;&lt;&lt;cur&lt;&lt;&quot; &quot;&lt;&lt;times&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(vis[cur][times]) <span class="keyword">continue</span>;</span><br><span class="line">vis[cur][times]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用一次免费次数扩点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> ed:e[cur])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> v=ed.v,w=ed.w;</span><br><span class="line"><span class="keyword">if</span>(!vis[v][times<span class="number">-1</span>] &amp;&amp; d&lt;dist[v][times<span class="number">-1</span>] &amp;&amp; times)</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;d,v,times<span class="number">-1</span>&#125;);</span><br><span class="line">dist[v][times<span class="number">-1</span>]=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不用免费次数</span></span><br><span class="line"><span class="keyword">if</span>(!vis[v][times] &amp;&amp; d+w&lt;dist[v][times])</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;d+w,v,times&#125;);</span><br><span class="line">dist[v][times]=d+w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=k;i++) ans=<span class="built_in">min</span>(ans,dist[t][i]);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题-div3-974-e">例题 div3 974 E</h3><h4 id="题意-2">题意</h4><p><span class="math inline"><em>n</em></span>个点，其中<spanclass="math inline"><em>h</em></span>个点有马，到达这些点上马之后速度可由2变为1，两人分别从1号点和n号点出发，并在一点相遇，求两人相遇所花的最短时间</p><h4 id="思路-2">思路</h4><p>建反边，多开一维记录当前是否有马，分别从1号点和n号点跑dij，枚举相遇的点，从四种状态中取最小即可</p><h4 id="代码-2">代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> v,w;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;edge&gt;e[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m,h;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;h;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">hourse</span>(n<span class="number">+1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x;i&lt;=h;i++) &#123;cin&gt;&gt;x;hourse[x]=<span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">e[a].<span class="built_in">pb</span>(&#123;b,c&#125;);</span><br><span class="line">e[b].<span class="built_in">pb</span>(&#123;a,c&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;ll&gt;&gt;<span class="built_in">dist1</span>(n<span class="number">+1</span>,<span class="built_in">vector</span>&lt;ll&gt;(<span class="number">2</span>,<span class="number">1e18</span>));</span><br><span class="line"><span class="keyword">auto</span> dist2=dist1;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;PIII,vector&lt;PIII&gt;,greater&lt;PIII&gt;&gt;q;<span class="comment">//到达i点且是否有马</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> work=[&amp;](vector&lt;vector&lt;ll&gt;&gt;&amp;dist)</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">vis</span>(n<span class="number">+1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> [cost,cur,st]=q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(vis[cur][st]) <span class="keyword">continue</span>;</span><br><span class="line">vis[cur][st]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> ed:e[cur])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> w=ed.w,v=ed.v;</span><br><span class="line"><span class="keyword">if</span>(st) <span class="comment">//有马</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( !vis[v][<span class="number">1</span>] &amp;&amp; cost+w/<span class="number">2</span>&lt;dist[v][<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">dist[v][<span class="number">1</span>]=cost+w/<span class="number">2</span>;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;dist[v][<span class="number">1</span>],v,st&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//没马</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[v][<span class="number">0</span>] &amp;&amp; cost+w&lt;dist[v][<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">dist[v][<span class="number">0</span>]=cost+w;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;dist[v][<span class="number">0</span>],v,st|hourse[v]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">q.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">1</span>,hourse[<span class="number">1</span>]&#125;);</span><br><span class="line">dist1[<span class="number">1</span>][hourse[<span class="number">1</span>]]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">work</span>(dist1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q=priority_queue&lt;PIII,vector&lt;PIII&gt;,greater&lt;PIII&gt;&gt;();</span><br><span class="line">q.<span class="built_in">push</span>(&#123;<span class="number">0</span>,n,hourse[n]&#125;);</span><br><span class="line">dist2[n][hourse[n]]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">work</span>(dist2);</span><br><span class="line"></span><br><span class="line">ll ans=<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">ll res=<span class="built_in">min</span>(&#123;<span class="built_in">max</span>(dist1[i][<span class="number">0</span>],dist2[i][<span class="number">0</span>]),<span class="built_in">max</span>(dist1[i][<span class="number">0</span>],dist2[i][<span class="number">1</span>]),<span class="built_in">max</span>(dist1[i][<span class="number">1</span>],dist2[i][<span class="number">0</span>]),<span class="built_in">max</span>(dist1[i][<span class="number">1</span>],dist2[i][<span class="number">1</span>])&#125;);</span><br><span class="line">ans=<span class="built_in">min</span>(ans,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">1e18</span>) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 板子 </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路</title>
      <link href="/ZcDawn/f216fabe.html"/>
      <url>/ZcDawn/f216fabe.html</url>
      
        <content type="html"><![CDATA[<h1 id="最短路">最短路</h1><h2 id="dijkstra">Dijkstra</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>(),<span class="number">0x3f3f3f3f</span>);</span><br><span class="line">    d[x]=<span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">0</span>,x&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t=q.<span class="built_in">top</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u=t.second;</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> ed:e[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=ed.v;</span><br><span class="line">            <span class="type">int</span> w=ed.w;</span><br><span class="line">            <span class="keyword">if</span>(d[v]&gt;d[u]+w)</span><br><span class="line">            &#123;</span><br><span class="line">                d[v]=d[u]+w;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;d[v],v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>复杂度<spanclass="math inline"><em>O</em>(<em>n</em><em>l</em><em>o</em><em>g</em><em>m</em>)</span></li><li>不能处理负边权和负环</li></ul><h2 id="spfa">spfa</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> v,w;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;edge&gt;e[N];</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[x]=<span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(x);</span><br><span class="line">    st[x]=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[u]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> ed:e[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=ed.v,w=ed.w;</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&gt;dist[u]+w)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v]=dist[u]+w;</span><br><span class="line"><span class="comment">//cnt[v]=cnt[u]+1;</span></span><br><span class="line"><span class="comment">//if(cnt[v]&gt;=n) //说明存在负环</span></span><br><span class="line">                <span class="keyword">if</span>(!st[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">                    st[v]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以处理负边权也可以判负环</li><li>最坏<spanclass="math inline"><em>O</em>(<em>n</em><em>m</em>)</span></li></ul><h2 id="floyed">floyed</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//邻接矩阵初始化:i==j d[i][j]=0</span></span><br><span class="line">                  <span class="comment">// i!=j 无边无穷大，有边为边权</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j) d[i][j]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> d[i][j]=<span class="number">1e9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyed</span><span class="params">()</span><span class="comment">//全源最短路</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)<span class="comment">//经过k点的最短路</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                d[i][j]=<span class="built_in">min</span>(d[i][j],d[i][k]+d[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bellman-ford">bellman-ford</h2><ul><li>可处理有边数限制的最短路</li><li>最多经过k条边的时间复杂度为<spanclass="math inline"><em>O</em>(<em>k</em><em>m</em>)</span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bellman</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[x]=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)<span class="comment">//最多走k条边</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(backup,dist,<span class="keyword">sizeof</span> dist);<span class="comment">//每次复制dist数组，用backup数组更新防止串联</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> ed:e[u])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> v=ed.v,w=ed.w;</span><br><span class="line">                dist[v]=<span class="built_in">min</span>(dist[v],backup[u]+w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 板子 </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/ZcDawn/d87f7e0c.html"/>
      <url>/ZcDawn/d87f7e0c.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;<span class="string">&quot;test&quot;</span>&lt;&lt;endl;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/ZcDawn/4a17b156.html"/>
      <url>/ZcDawn/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
